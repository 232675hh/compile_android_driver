# 工作流名称为 Android14-6.1
name: Android14-6.1

# 触发条件配置
on:
  workflow_dispatch:  # 允许手动触发工作流执行

# 定义工作流中的作业
jobs:
  build:
    # 指定运行环境为最新版Ubuntu
    runs-on: ubuntu-latest
    
    steps:
      # 步骤1: 检出代码仓库
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # 步骤2: 创建驱动目录并移动文件
      - name: Prepare kerneldriver directory
        run: |
          mkdir kerneldriver
          mv ./rwProcMem_module/*.h ./rwProcMem_module/*.c ./rwProcMem_module/Makefile kerneldriver/
          
      # 步骤3: 修改内核版本代码定义
      - name: Modify MY_LINUX_VERSION_CODE
        run: |
          sed -i '/#ifndef MY_LINUX_VERSION_CODE/a #define MY_LINUX_VERSION_CODE KERNEL_VERSION(6,1,75)' kerneldriver/ver_control.h

      # 步骤4: 安装repo工具和依赖
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git-core gnupg flex bison build-essential zip curl zlib1g-dev \
          libc6-dev-i386 libncurses5 x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev \
          libxml2-utils xsltproc unzip fontconfig python3 python-is-python3
          sudo curl -L https://storage.googleapis.com/git-repo-downloads/repo -o /usr/local/bin/repo
          sudo chmod a+x /usr/local/bin/repo

      # 步骤5: 设置Android内核源码
      - name: Set up Android Kernel source
        run: |
          mkdir -p android-kernel && cd android-kernel
          repo init -u https://android.googlesource.com/kernel/manifest -b common-android14-6.1 --no-repo-verify --depth=1
          repo sync --force-sync --no-clone-bundle --no-tags -f -c -j$(nproc)

      # 步骤6: 复制内核驱动文件
      - name: Copy kerneldriver
        run: |
          cd android-kernel
          mkdir -p common/drivers 
          cp -r ../kerneldriver common/drivers/

      # 步骤7: 添加驱动到内核构建系统
      - name: Add driver to kernel build
        run: |
          cd android-kernel
          # 在drivers/Makefile中添加模块
          echo "obj-y += kerneldriver/" >> common/drivers/Makefile
          
          # 在drivers/Kconfig中添加配置
          echo 'source "drivers/kerneldriver/Kconfig"' >> common/drivers/Kconfig
          
          # 创建驱动Kconfig文件
          cat > common/drivers/kerneldriver/Kconfig << 'EOF'
          config RWPROCMEM_MODULE
              tristate "rwProcMem kernel module"
              default m
              help
                This module provides physical memory access.
          EOF
          
          # 在gki_defconfig中启用模块
          echo "CONFIG_RWPROCMEM_MODULE=m" >> common/android/configs/gki_defconfig

      # 步骤8: 使用Android构建系统构建内核
      - name: Build Android Kernel
        run: |
          cd android-kernel
          # 设置构建配置
          export BUILD_CONFIG=common/build.config.gki.aarch64
          export LTO=thin
          # 完整构建内核
          build/build.sh -j$(nproc)

      # 步骤9: 上传编译好的驱动文件
      - name: Upload kerneldriver.ko
        uses: actions/upload-artifact@v4
        with:
          name: kerneldriver.ko
          path: android-kernel/out/android14-6.1/dist/drivers/kerneldriver/rwProcMem_module.ko      - name: Copy kerneldriver
        run: |
          cd android-kernel
          mkdir -p common/drivers 
          cp -r ../kerneldriver common/drivers/

      # 步骤7: 添加驱动到内核构建系统
      - name: Add driver to kernel build
        run: |
          cd android-kernel
          # 在drivers/Makefile中添加模块
          echo "obj-y += kerneldriver/" >> common/drivers/Makefile
          
          # 在drivers/Kconfig中添加配置
          echo 'source "drivers/kerneldriver/Kconfig"' >> common/drivers/Kconfig
          
          # 创建驱动Kconfig文件
          cat > common/drivers/kerneldriver/Kconfig << 'EOF'
          config RWPROCMEM_MODULE
              tristate "rwProcMem kernel module"
              default m
              help
                This module provides physical memory access.
          EOF
          
          # 在gki_defconfig中启用模块
          echo "CONFIG_RWPROCMEM_MODULE=m" >> common/android/configs/gki_defconfig

      # 步骤8: 使用Android构建系统构建内核
      - name: Build Android Kernel
        run: |
          cd android-kernel
          # 设置构建配置
          export BUILD_CONFIG=common/build.config.gki.aarch64
          export LTO=thin
          # 完整构建内核
          build/build.sh -j$(nproc)

      # 步骤9: 上传编译好的驱动文件
      - name: Upload kerneldriver.ko
        uses: actions/upload-artifact@v4
        with:
          name: kerneldriver.ko
          path: android-kernel/out/android14-6.1/dist/drivers/kerneldriver/rwProcMem_module.ko
